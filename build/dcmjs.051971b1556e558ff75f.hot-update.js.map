{"version":3,"sources":["webpack://dcmjs/./adapters/Cornerstone/Segmentation.js"],"names":["Segmentation","imageIds","images","brushData","brushState","toolState","segments","datasets","console","log","dims","multiframe","contains","seg","createSegFromImages","addMetaDataToSeg","masks","segIdx","length","z","imageIdSpecificToolState","brsuh","brush","data","dataSet","dataset","numSegments","i","addSegment","isMultiframe","image","arrayBuffer","byteArray","buffer","dicomData","dcmjs","DicomMessage","readFile","DicomMetaDictionary","naturalizeDataset","dict","_meta","namifyDataset","meta","push","normalizers","Normalizer","normalizeToDataset","derivations","x","Columns","y","Rows","xy","xyz","segmentSequence","SegmentSequence","pixelData","BitArray","unpack","PixelData","segMetadata","seriesInstanceUid","SeriesInstanceUid","Array","isArray","segCount","imageId","invalidated","Uint8ClampedArray","cToolsPixelData","p"],"mappings":"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","file":"dcmjs.051971b1556e558ff75f.hot-update.js","sourcesContent":["export default class Segmentation {\n  constructor() {}\n\n  static generateToolState(imageIds, images, brushData) {\n    // NOTE: here be dragons. Currently if a brush has been used and then erased,\n    // This will flag up as a segmentation, even though its full of zeros.\n    // Fixing this cleanly really requires an update of cornerstoneTools.\n\n    const { toolState, segments } = brushState;\n    const datasets = [];\n\n    console.log(images[0]);\n\n    const dims = {};\n\n    const multiframe = imageIds[0].contains(\"?frame\");\n\n    const seg = Segmentation.createSegFromImages(images, multiframe);\n    Segmentation.addMetaDataToSeg(seg, segments);\n\n    const masks = [];\n\n    for (let segIdx = 0; segIdx < segments.length; segIdx++) {\n      if (!segments[segIdx]) {\n        continue;\n      }\n\n      for (let z = 0; z < imageIds.length; z++) {\n        const imageIdSpecificToolState = toolState[imageIds[z]];\n\n        if (\n          imageIdSpecificToolState.brsuh &&\n          imageIdSpecificToolState.brush.data\n        ) {\n          const brushData = imageIdSpecificToolState.brush.data;\n        }\n      }\n    }\n\n    const dataSet = seg.dataset;\n\n    let numSegments = 0;\n\n    // TODO -> save pixel data to seg.pixelData\n  }\n\n  static addMetaDataToSeg(seg, segments) {\n    for (let i = 0; i < segments.length; i++) {\n      if (segments[i]) {\n        numSegments++;\n\n        seg.addSegment(segments[i]);\n      }\n    }\n  }\n\n  /**\n   * @static createSegFromImages - description\n   *\n   * @param  {object} images       description\n   * @param  {Boolean} isMultiframe description\n   * @returns {dataSet}              description\n   */\n  static createSegFromImages(images, isMultiframe) {\n    if (isMultiframe) {\n      const image = images[0];\n      const arrayBuffer = image.data.byteArray.buffer;\n\n      const dicomData = dcmjs.data.DicomMessage.readFile(arrayBuffer);\n      const dataset = dcmjs.data.DicomMetaDictionary.naturalizeDataset(\n        dicomData.dict\n      );\n\n      dataset._meta = dcmjs.data.DicomMetaDictionary.namifyDataset(\n        dicomData.meta\n      );\n\n      datasets.push(dataset);\n    } else {\n      for (let i = 0; i < images.length; i++) {\n        const image = images[i];\n        const arrayBuffer = image.data.byteArray.buffer;\n        const dicomData = dcmjs.data.DicomMessage.readFile(arrayBuffer);\n        const dataset = dcmjs.data.DicomMetaDictionary.naturalizeDataset(\n          dicomData.dict\n        );\n\n        dataset._meta = dcmjs.data.DicomMetaDictionary.namifyDataset(\n          dicomData.meta\n        );\n        datasets.push(dataset);\n      }\n    }\n\n    const multiframe = dcmjs.normalizers.Normalizer.normalizeToDataset(\n      datasets\n    );\n\n    return new dcmjs.derivations.Segmentation([multiframe]);\n  }\n\n  static readToolState(imageIds, arrayBuffer) {\n    dicomData = dcmjs.data.DicomMessage.readFile(arrayBuffer);\n    let dataset = dcmjs.data.DicomMetaDictionary.naturalizeDataset(\n      dicomData.dict\n    );\n    dataset._meta = dcmjs.data.DicomMetaDictionary.namifyDataset(\n      dicomData.meta\n    );\n    const multiframe = dcmjs.normalizers.Normalizer.normalizeToDataset([\n      dataset\n    ]);\n\n    const dims = {\n      x: multiframe.Columns,\n      y: multiframe.Rows,\n      z: imageIds.length,\n      xy: multiframe.Columns * multiframe.Rows,\n      xyz: multiframe.Columns * multiframe.Rows * imageIds.length\n    };\n\n    const segmentSequence = multiframe.SegmentSequence;\n    const pixelData = dcmjs.data.BitArray.unpack(multiframe.PixelData);\n\n    //console.log(segmentSequence);\n\n    //console.log(multiframe);\n\n    const segMetadata = {\n      seriesInstanceUid: multiframe.SeriesInstanceUid,\n      data: []\n    };\n\n    const toolState = {};\n\n    if (Array.isArray(segmentSequence)) {\n      const segCount = segmentSequence.length;\n\n      for (let z = 0; z < imageIds.length; z++) {\n        const imageId = imageIds[z];\n\n        const imageIdSpecificToolState = {};\n\n        imageIdSpecificToolState.brush = {};\n        imageIdSpecificToolState.brush.data = [];\n\n        const brushData = imageIdSpecificToolState.brush.data;\n\n        for (let i = 0; i < segCount; i++) {\n          brushData[i] = {\n            invalidated: true,\n            pixelData: new Uint8ClampedArray(dims.x * dims.y)\n          };\n        }\n\n        toolState[imageId] = imageIdSpecificToolState;\n      }\n\n      for (let segIdx = 0; segIdx < segmentSequence.length; segIdx++) {\n        segMetadata.data.push(segmentSequence[segIdx]);\n\n        for (let z = 0; z < imageIds.length; z++) {\n          const imageId = imageIds[z];\n\n          const cToolsPixelData =\n            toolState[imageId].brush.data[segIdx].pixelData;\n\n          for (let p = 0; p < dims.xy; p++) {\n            cToolsPixelData[p] = pixelData[segIdx * dims.xyz + z * dims.xy + p];\n          }\n        }\n      }\n    } else {\n      // Only one segment, will be stored as an object.\n      segMetadata.data.push(segmentSequence);\n\n      const segIdx = 0;\n\n      for (let z = 0; z < imageIds.length; z++) {\n        const imageId = imageIds[z];\n\n        const imageIdSpecificToolState = {};\n\n        imageIdSpecificToolState.brush = {};\n        imageIdSpecificToolState.brush.data = [];\n        imageIdSpecificToolState.brush.data[segIdx] = {\n          invalidated: true,\n          pixelData: new Uint8ClampedArray(dims.x * dims.y)\n        };\n\n        const cToolsPixelData =\n          imageIdSpecificToolState.brush.data[segIdx].pixelData;\n\n        for (let p = 0; p < dims.xy; p++) {\n          cToolsPixelData[p] = pixelData[z * dims.xy + p];\n        }\n\n        toolState[imageId] = imageIdSpecificToolState;\n      }\n    }\n\n    //console.log(toolState);\n\n    // TODO -> return seg metadata and brush tool data.\n\n    return { toolState, segMetadata };\n  }\n}\n"],"sourceRoot":""}