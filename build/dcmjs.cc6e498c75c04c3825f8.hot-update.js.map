{"version":3,"sources":["webpack://dcmjs/./adapters/Cornerstone/Segmentation.js"],"names":["Segmentation","imageIds","images","brushData","console","log","toolState","segments","image0","dims","x","columns","y","rows","z","length","xy","xyz","multiframe","includes","seg","createSegFromImages","numsegments","addMetaDataToSegAndGetSegCount","numSegments","Warning","masks","segIdx","imageIdSpecificToolState","brsuh","brush","data","dataSet","dataset","i","addSegment","isMultiframe","datasets","image","arrayBuffer","byteArray","buffer","dicomData","dcmjs","DicomMessage","readFile","DicomMetaDictionary","naturalizeDataset","dict","_meta","namifyDataset","meta","push","normalizers","Normalizer","normalizeToDataset","derivations","Columns","Rows","segmentSequence","SegmentSequence","pixelData","BitArray","unpack","PixelData","segMetadata","seriesInstanceUid","SeriesInstanceUid","Array","isArray","segCount","imageId","invalidated","Uint8ClampedArray","cToolsPixelData","p"],"mappings":"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","file":"dcmjs.cc6e498c75c04c3825f8.hot-update.js","sourcesContent":["export default class Segmentation {\n  constructor() {}\n\n  static generateToolState(imageIds, images, brushData) {\n    // NOTE: here be dragons. Currently if a brush has been used and then erased,\n    // This will flag up as a segmentation, even though its full of zeros.\n    // Fixing this cleanly really requires an update of cornerstoneTools.\n\n    console.log(\"testButton\");\n\n    const { toolState, segments } = brushData;\n\n    console.log(\"test2\");\n\n    console.log(images);\n\n    const image0 = images[0];\n\n    const dims = {\n      x: image0.columns,\n      y: image0.rows,\n      z: imageIds.length\n    };\n\n    dims.xy = dims.x * dims.y;\n    dims.xyz = dims.xy * dims.z;\n\n    const multiframe = imageIds[0].includes(\"?frame\");\n\n    const seg = Segmentation.createSegFromImages(images, multiframe);\n    const numsegments = Segmentation.addMetaDataToSegAndGetSegCount(\n      seg,\n      segments\n    );\n\n    if (!numSegments) {\n      throw new Warning(\"No segments to export!\");\n    }\n\n    const masks = [];\n\n    for (let segIdx = 0; segIdx < segments.length; segIdx++) {\n      if (!segments[segIdx]) {\n        continue;\n      }\n\n      for (let z = 0; z < imageIds.length; z++) {\n        const imageIdSpecificToolState = toolState[imageIds[z]];\n\n        if (\n          imageIdSpecificToolState.brsuh &&\n          imageIdSpecificToolState.brush.data\n        ) {\n          const brushData = imageIdSpecificToolState.brush.data;\n        }\n      }\n    }\n\n    const dataSet = seg.dataset;\n\n    // TODO -> save pixel data to seg.pixelData\n  }\n\n  static addMetaDataToSegAndGetSegCount(seg, segments) {\n    let numSegments = 0;\n\n    for (let i = 0; i < segments.length; i++) {\n      if (segments[i]) {\n        numSegments++;\n\n        seg.addSegment(segments[i]);\n      }\n    }\n\n    return numSegments;\n  }\n\n  /**\n   * @static createSegFromImages - description\n   *\n   * @param  {object} images       description\n   * @param  {Boolean} isMultiframe description\n   * @returns {dataSet}              description\n   */\n  static createSegFromImages(images, isMultiframe) {\n    const datasets = [];\n\n    if (isMultiframe) {\n      const image = images[0];\n      const arrayBuffer = image.data.byteArray.buffer;\n\n      const dicomData = dcmjs.data.DicomMessage.readFile(arrayBuffer);\n      const dataset = dcmjs.data.DicomMetaDictionary.naturalizeDataset(\n        dicomData.dict\n      );\n\n      dataset._meta = dcmjs.data.DicomMetaDictionary.namifyDataset(\n        dicomData.meta\n      );\n\n      datasets.push(dataset);\n    } else {\n      for (let i = 0; i < images.length; i++) {\n        const image = images[i];\n        const arrayBuffer = image.data.byteArray.buffer;\n        const dicomData = dcmjs.data.DicomMessage.readFile(arrayBuffer);\n        const dataset = dcmjs.data.DicomMetaDictionary.naturalizeDataset(\n          dicomData.dict\n        );\n\n        dataset._meta = dcmjs.data.DicomMetaDictionary.namifyDataset(\n          dicomData.meta\n        );\n        datasets.push(dataset);\n      }\n    }\n\n    const multiframe = dcmjs.normalizers.Normalizer.normalizeToDataset(\n      datasets\n    );\n\n    return new dcmjs.derivations.Segmentation([multiframe]);\n  }\n\n  static readToolState(imageIds, arrayBuffer) {\n    dicomData = dcmjs.data.DicomMessage.readFile(arrayBuffer);\n    let dataset = dcmjs.data.DicomMetaDictionary.naturalizeDataset(\n      dicomData.dict\n    );\n    dataset._meta = dcmjs.data.DicomMetaDictionary.namifyDataset(\n      dicomData.meta\n    );\n    const multiframe = dcmjs.normalizers.Normalizer.normalizeToDataset([\n      dataset\n    ]);\n\n    const dims = {\n      x: multiframe.Columns,\n      y: multiframe.Rows,\n      z: imageIds.length,\n      xy: multiframe.Columns * multiframe.Rows,\n      xyz: multiframe.Columns * multiframe.Rows * imageIds.length\n    };\n\n    const segmentSequence = multiframe.SegmentSequence;\n    const pixelData = dcmjs.data.BitArray.unpack(multiframe.PixelData);\n\n    //console.log(segmentSequence);\n\n    //console.log(multiframe);\n\n    const segMetadata = {\n      seriesInstanceUid: multiframe.SeriesInstanceUid,\n      data: []\n    };\n\n    const toolState = {};\n\n    if (Array.isArray(segmentSequence)) {\n      const segCount = segmentSequence.length;\n\n      for (let z = 0; z < imageIds.length; z++) {\n        const imageId = imageIds[z];\n\n        const imageIdSpecificToolState = {};\n\n        imageIdSpecificToolState.brush = {};\n        imageIdSpecificToolState.brush.data = [];\n\n        const brushData = imageIdSpecificToolState.brush.data;\n\n        for (let i = 0; i < segCount; i++) {\n          brushData[i] = {\n            invalidated: true,\n            pixelData: new Uint8ClampedArray(dims.x * dims.y)\n          };\n        }\n\n        toolState[imageId] = imageIdSpecificToolState;\n      }\n\n      for (let segIdx = 0; segIdx < segmentSequence.length; segIdx++) {\n        segMetadata.data.push(segmentSequence[segIdx]);\n\n        for (let z = 0; z < imageIds.length; z++) {\n          const imageId = imageIds[z];\n\n          const cToolsPixelData =\n            toolState[imageId].brush.data[segIdx].pixelData;\n\n          for (let p = 0; p < dims.xy; p++) {\n            cToolsPixelData[p] = pixelData[segIdx * dims.xyz + z * dims.xy + p];\n          }\n        }\n      }\n    } else {\n      // Only one segment, will be stored as an object.\n      segMetadata.data.push(segmentSequence);\n\n      const segIdx = 0;\n\n      for (let z = 0; z < imageIds.length; z++) {\n        const imageId = imageIds[z];\n\n        const imageIdSpecificToolState = {};\n\n        imageIdSpecificToolState.brush = {};\n        imageIdSpecificToolState.brush.data = [];\n        imageIdSpecificToolState.brush.data[segIdx] = {\n          invalidated: true,\n          pixelData: new Uint8ClampedArray(dims.x * dims.y)\n        };\n\n        const cToolsPixelData =\n          imageIdSpecificToolState.brush.data[segIdx].pixelData;\n\n        for (let p = 0; p < dims.xy; p++) {\n          cToolsPixelData[p] = pixelData[z * dims.xy + p];\n        }\n\n        toolState[imageId] = imageIdSpecificToolState;\n      }\n    }\n\n    //console.log(toolState);\n\n    // TODO -> return seg metadata and brush tool data.\n\n    return { toolState, segMetadata };\n  }\n}\n"],"sourceRoot":""}