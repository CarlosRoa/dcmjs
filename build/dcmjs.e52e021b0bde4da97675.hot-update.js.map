{"version":3,"sources":["webpack://dcmjs/./adapters/Cornerstone/Segmentation.js"],"names":["Segmentation","stackOfImages","toolState","segMetadata","idx","segment","modules","brush","setters","metadata","_seriesInfo","seriesInstanceUid","imageIds","arrayBuffer","dicomData","dcmjs","data","DicomMessage","readFile","dataset","DicomMetaDictionary","naturalizeDataset","dict","_meta","namifyDataset","meta","multiframe","normalizers","Normalizer","normalizeToDataset","dims","x","Columns","y","Rows","z","length","xy","segmentSequence","SegmentSequence","pixelData","BitArray","unpack","PixelData","console","log","Array","isArray","segCount","imageId","imageIdSpecificToolState","brushData","i","invalidated","Uint8ClampedArray","segIndex","push","cToolsPixelData","p"],"mappings":"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","file":"dcmjs.e52e021b0bde4da97675.hot-update.js","sourcesContent":["export default class Segmentation {\n  constructor() {}\n\n  static generateToolState(stackOfImages, toolState) {}\n\n  static _setSegMetadata(segMetadata, idx, segment) {\n    segMetadata[idx] = segment;\n\n    modules.brush.setters.metadata(\n      this._seriesInfo.seriesInstanceUid,\n      idx,\n      segment\n    );\n  }\n\n  static _addOneSegToCornerstoneToolState() {}\n\n  static readToolState(imageIds, arrayBuffer) {\n    dicomData = dcmjs.data.DicomMessage.readFile(arrayBuffer);\n    let dataset = dcmjs.data.DicomMetaDictionary.naturalizeDataset(\n      dicomData.dict\n    );\n    dataset._meta = dcmjs.data.DicomMetaDictionary.namifyDataset(\n      dicomData.meta\n    );\n    const multiframe = dcmjs.normalizers.Normalizer.normalizeToDataset([\n      dataset\n    ]);\n\n    const dims = {\n      x: multiframe.Columns,\n      y: multiframe.Rows,\n      z: imageIds.length,\n      xy: multiframe.Columns * multiframe.Rows\n    };\n\n    const segmentSequence = multiframe.SegmentSequence;\n    const pixelData = dcmjs.data.BitArray.unpack(multiframe.PixelData);\n\n    console.log(segmentSequence);\n\n    console.log(multiframe);\n\n    const segMetadata = [];\n\n    const toolState = {};\n\n    if (Array.isArray(segmentSequence)) {\n      const segCount = segmentSequence.length;\n\n      for (let z = 0; z < imageIds.length; z++) {\n        const imageId = imageIds[z];\n\n        const imageIdSpecificToolState = {};\n\n        imageIdSpecificToolState.brush = {};\n        imageIdSpecificToolState.brush.data = [];\n\n        const brushData = imageIdSpecificToolState.brush.data;\n\n        for (let i = 0; i < segCount; i++) {\n          brushData[i] = {\n            invalidated: true,\n            pixelData: new Uint8ClampedArray(dims.x * dims.y)\n          };\n        }\n      }\n\n      for (let segIndex = 0; segIndex < segmentSequence.length; segIndex++) {\n        segMetadata.push(segmentSequence[segIndex]);\n\n        for (let z = 0; z < imageIds.length; z++) {}\n      }\n    } else {\n      // Only one segment, will be stored as an object.\n      segMetadata.push(segmentSequence);\n\n      const segIndex = 0;\n\n      for (let z = 0; z < imageIds.length; z++) {\n        const imageId = imageIds[z];\n\n        const imageIdSpecificToolState = {};\n\n        imageIdSpecificToolState.brush = {};\n        imageIdSpecificToolState.brush.data = [];\n        imageIdSpecificToolState.brush.data[segIndex] = {\n          invalidated: true,\n          pixelData: new Uint8ClampedArray(dims.x * dims.y)\n        };\n\n        const cToolsPixelData =\n          imageIdSpecificToolState.brush.data[segIndex].pixelData;\n\n        for (let p = 0; p < dims.xy; p++) {\n          cToolsPixelData[p] = pixelData[z * dims.xy + p];\n        }\n\n        toolState[imageId] = imageIdSpecificToolState;\n      }\n    }\n\n    console.log(toolState);\n\n    // TODO -> return seg metadata and brush tool data.\n\n    /*\n    const { globalImageIdSpecificToolStateManager } = cornerstoneTools;\n\n    for (let i = 0; i < imageIds.length; i++) {\n      const imageId = imageIds[i];\n      const byteOffset = width * height * i;\n      const length = width * height;\n      const slicePixelData = new Uint8ClampedArray(buffer, byteOffset, length);\n\n      const toolData = [];\n      toolData[segmentationIndex] = {\n        pixelData: slicePixelData,\n        invalidated: true\n      };\n\n      const toolState =\n        globalImageIdSpecificToolStateManager.saveImageIdToolState(imageId) ||\n        {};\n\n      toolState[toolType] = {\n        data: toolData\n      };\n\n      globalImageIdSpecificToolStateManager.restoreImageIdToolState(\n        imageId,\n        toolState\n      );\n    }\n    */\n  }\n}\n"],"sourceRoot":""}