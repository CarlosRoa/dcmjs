{"version":3,"sources":["webpack://dcmjs/./adapters/Cornerstone/Segmentation.js"],"names":["Segmentation","imageIds","toolState","imageId","split","multiframe","length","arrayBuffer","dicomData","dcmjs","data","DicomMessage","readFile","dataset","DicomMetaDictionary","naturalizeDataset","dict","_meta","namifyDataset","meta","normalizers","Normalizer","normalizeToDataset","dims","x","Columns","y","Rows","z","xy","xyz","segmentSequence","SegmentSequence","pixelData","BitArray","unpack","PixelData","segMetadata","seriesInstanceUid","SeriesInstanceUid","Array","isArray","segCount","imageIdSpecificToolState","brush","brushData","i","invalidated","Uint8ClampedArray","segIndex","push","cToolsPixelData","p"],"mappings":"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","file":"dcmjs.66a93196dbccc9d08843.hot-update.js","sourcesContent":["export default class Segmentation {\n  constructor() {}\n\n  static generateToolState(imageIds, toolState) {\n    const imageId = imageIds[0];\n    const split = imageId.split(\"?frame\");\n\n    let multiframe;\n\n    if (split.length > 1) {\n      multiframe = true;\n    }\n  }\n\n  static _addOneSegToCornerstoneToolState() {}\n\n  static readToolState(imageIds, arrayBuffer) {\n    dicomData = dcmjs.data.DicomMessage.readFile(arrayBuffer);\n    let dataset = dcmjs.data.DicomMetaDictionary.naturalizeDataset(\n      dicomData.dict\n    );\n    dataset._meta = dcmjs.data.DicomMetaDictionary.namifyDataset(\n      dicomData.meta\n    );\n    const multiframe = dcmjs.normalizers.Normalizer.normalizeToDataset([\n      dataset\n    ]);\n\n    const dims = {\n      x: multiframe.Columns,\n      y: multiframe.Rows,\n      z: imageIds.length,\n      xy: multiframe.Columns * multiframe.Rows,\n      xyz: multiframe.Columns * multiframe.Rows * imageIds.length\n    };\n\n    const segmentSequence = multiframe.SegmentSequence;\n    const pixelData = dcmjs.data.BitArray.unpack(multiframe.PixelData);\n\n    //console.log(segmentSequence);\n\n    //console.log(multiframe);\n\n    const segMetadata = {\n      seriesInstanceUid: multiframe.SeriesInstanceUid,\n      data: []\n    };\n\n    const toolState = {};\n\n    if (Array.isArray(segmentSequence)) {\n      const segCount = segmentSequence.length;\n\n      for (let z = 0; z < imageIds.length; z++) {\n        const imageId = imageIds[z];\n\n        const imageIdSpecificToolState = {};\n\n        imageIdSpecificToolState.brush = {};\n        imageIdSpecificToolState.brush.data = [];\n\n        const brushData = imageIdSpecificToolState.brush.data;\n\n        for (let i = 0; i < segCount; i++) {\n          brushData[i] = {\n            invalidated: true,\n            pixelData: new Uint8ClampedArray(dims.x * dims.y)\n          };\n        }\n\n        toolState[imageId] = imageIdSpecificToolState;\n      }\n\n      for (let segIndex = 0; segIndex < segmentSequence.length; segIndex++) {\n        segMetadata.data.push(segmentSequence[segIndex]);\n\n        for (let z = 0; z < imageIds.length; z++) {\n          const imageId = imageIds[z];\n\n          const cToolsPixelData =\n            toolState[imageId].brush.data[segIndex].pixelData;\n\n          for (let p = 0; p < dims.xy; p++) {\n            cToolsPixelData[p] =\n              pixelData[segIndex * dims.xyz + z * dims.xy + p];\n          }\n        }\n      }\n    } else {\n      // Only one segment, will be stored as an object.\n      segMetadata.data.push(segmentSequence);\n\n      const segIndex = 0;\n\n      for (let z = 0; z < imageIds.length; z++) {\n        const imageId = imageIds[z];\n\n        const imageIdSpecificToolState = {};\n\n        imageIdSpecificToolState.brush = {};\n        imageIdSpecificToolState.brush.data = [];\n        imageIdSpecificToolState.brush.data[segIndex] = {\n          invalidated: true,\n          pixelData: new Uint8ClampedArray(dims.x * dims.y)\n        };\n\n        const cToolsPixelData =\n          imageIdSpecificToolState.brush.data[segIndex].pixelData;\n\n        for (let p = 0; p < dims.xy; p++) {\n          cToolsPixelData[p] = pixelData[z * dims.xy + p];\n        }\n\n        toolState[imageId] = imageIdSpecificToolState;\n      }\n    }\n\n    //console.log(toolState);\n\n    // TODO -> return seg metadata and brush tool data.\n\n    return { toolState, segMetadata };\n  }\n}\n"],"sourceRoot":""}