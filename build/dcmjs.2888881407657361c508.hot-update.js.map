{"version":3,"sources":["webpack://dcmjs/./adapters/Cornerstone/Segmentation.js"],"names":["Segmentation","imageIds","images","brushData","brushState","toolState","segments","datasets","multiframe","contains","seg","createSegFromImages","addMetaDataToSeg","masks","segIdx","length","i","imageIdSpecificToolState","brsuh","brush","data","j","pixelData","mask","dataSet","dataset","numSegments","addSegment","isMultiframe","image","arrayBuffer","byteArray","buffer","dicomData","dcmjs","DicomMessage","readFile","DicomMetaDictionary","naturalizeDataset","dict","_meta","namifyDataset","meta","push","normalizers","Normalizer","normalizeToDataset","derivations","dims","x","Columns","y","Rows","z","xy","xyz","segmentSequence","SegmentSequence","BitArray","unpack","PixelData","segMetadata","seriesInstanceUid","SeriesInstanceUid","Array","isArray","segCount","imageId","invalidated","Uint8ClampedArray","cToolsPixelData","p"],"mappings":"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","file":"dcmjs.2888881407657361c508.hot-update.js","sourcesContent":["export default class Segmentation {\n  constructor() {}\n\n  static generateToolState(imageIds, images, brushData) {\n    // NOTE: here be dragons. Currently if a brush has been used and then erased,\n    // This will flag up as a segmentation, even though its full of zeros.\n    // Fixing this cleanly really requires an update of cornerstoneTools.\n\n    const { toolState, segments } = brushState;\n    const datasets = [];\n\n    const multiframe = imageIds[0].contains(\"?frame\");\n\n    const seg = Segmentation.createSegFromImages(images, multiframe);\n    Segmentation.addMetaDataToSeg(seg, segments);\n\n    const masks = [];\n\n    for (let segIdx = 0; segIdx < segments.length; segIdx++) {}\n\n    for (let i = 0; i < imageIds.length; i++) {\n      const imageIdSpecificToolState = toolState[imageIds[i]];\n\n      if (\n        imageIdSpecificToolState.brsuh &&\n        imageIdSpecificToolState.brush.data\n      ) {\n        const brushData = imageIdSpecificToolState.brush.data;\n\n        for (j = 0; j < brushData; j++) {\n          if (brushData[j].pixelData) {\n            mask;\n          }\n        }\n      }\n    }\n\n    const dataSet = seg.dataset;\n\n    let numSegments = 0;\n\n    // TODO -> save pixel data to seg.pixelData\n  }\n\n  static addMetaDataToSeg(seg, segments) {\n    for (let i = 0; i < segments.length; i++) {\n      if (segments[i]) {\n        numSegments++;\n\n        seg.addSegment(segments[i]);\n      }\n    }\n  }\n\n  /**\n   * @static createSegFromImages - description\n   *\n   * @param  {object} images       description\n   * @param  {Boolean} isMultiframe description\n   * @returns {dataSet}              description\n   */\n  static createSegFromImages(images, isMultiframe) {\n    if (isMultiframe) {\n      const image = images[0];\n      const arrayBuffer = image.data.byteArray.buffer;\n\n      const dicomData = dcmjs.data.DicomMessage.readFile(arrayBuffer);\n      const dataset = dcmjs.data.DicomMetaDictionary.naturalizeDataset(\n        dicomData.dict\n      );\n\n      dataset._meta = dcmjs.data.DicomMetaDictionary.namifyDataset(\n        dicomData.meta\n      );\n\n      datasets.push(dataset);\n    } else {\n      for (let i = 0; i < images.length; i++) {\n        const image = images[i];\n        const arrayBuffer = image.data.byteArray.buffer;\n        const dicomData = dcmjs.data.DicomMessage.readFile(arrayBuffer);\n        const dataset = dcmjs.data.DicomMetaDictionary.naturalizeDataset(\n          dicomData.dict\n        );\n\n        dataset._meta = dcmjs.data.DicomMetaDictionary.namifyDataset(\n          dicomData.meta\n        );\n        datasets.push(dataset);\n      }\n    }\n\n    const multiframe = dcmjs.normalizers.Normalizer.normalizeToDataset(\n      datasets\n    );\n\n    return new dcmjs.derivations.Segmentation([multiframe]);\n  }\n\n  static readToolState(imageIds, arrayBuffer) {\n    dicomData = dcmjs.data.DicomMessage.readFile(arrayBuffer);\n    let dataset = dcmjs.data.DicomMetaDictionary.naturalizeDataset(\n      dicomData.dict\n    );\n    dataset._meta = dcmjs.data.DicomMetaDictionary.namifyDataset(\n      dicomData.meta\n    );\n    const multiframe = dcmjs.normalizers.Normalizer.normalizeToDataset([\n      dataset\n    ]);\n\n    const dims = {\n      x: multiframe.Columns,\n      y: multiframe.Rows,\n      z: imageIds.length,\n      xy: multiframe.Columns * multiframe.Rows,\n      xyz: multiframe.Columns * multiframe.Rows * imageIds.length\n    };\n\n    const segmentSequence = multiframe.SegmentSequence;\n    const pixelData = dcmjs.data.BitArray.unpack(multiframe.PixelData);\n\n    //console.log(segmentSequence);\n\n    //console.log(multiframe);\n\n    const segMetadata = {\n      seriesInstanceUid: multiframe.SeriesInstanceUid,\n      data: []\n    };\n\n    const toolState = {};\n\n    if (Array.isArray(segmentSequence)) {\n      const segCount = segmentSequence.length;\n\n      for (let z = 0; z < imageIds.length; z++) {\n        const imageId = imageIds[z];\n\n        const imageIdSpecificToolState = {};\n\n        imageIdSpecificToolState.brush = {};\n        imageIdSpecificToolState.brush.data = [];\n\n        const brushData = imageIdSpecificToolState.brush.data;\n\n        for (let i = 0; i < segCount; i++) {\n          brushData[i] = {\n            invalidated: true,\n            pixelData: new Uint8ClampedArray(dims.x * dims.y)\n          };\n        }\n\n        toolState[imageId] = imageIdSpecificToolState;\n      }\n\n      for (let segIdx = 0; segIdx < segmentSequence.length; segIdx++) {\n        segMetadata.data.push(segmentSequence[segIdx]);\n\n        for (let z = 0; z < imageIds.length; z++) {\n          const imageId = imageIds[z];\n\n          const cToolsPixelData =\n            toolState[imageId].brush.data[segIdx].pixelData;\n\n          for (let p = 0; p < dims.xy; p++) {\n            cToolsPixelData[p] = pixelData[segIdx * dims.xyz + z * dims.xy + p];\n          }\n        }\n      }\n    } else {\n      // Only one segment, will be stored as an object.\n      segMetadata.data.push(segmentSequence);\n\n      const segIdx = 0;\n\n      for (let z = 0; z < imageIds.length; z++) {\n        const imageId = imageIds[z];\n\n        const imageIdSpecificToolState = {};\n\n        imageIdSpecificToolState.brush = {};\n        imageIdSpecificToolState.brush.data = [];\n        imageIdSpecificToolState.brush.data[segIdx] = {\n          invalidated: true,\n          pixelData: new Uint8ClampedArray(dims.x * dims.y)\n        };\n\n        const cToolsPixelData =\n          imageIdSpecificToolState.brush.data[segIdx].pixelData;\n\n        for (let p = 0; p < dims.xy; p++) {\n          cToolsPixelData[p] = pixelData[z * dims.xy + p];\n        }\n\n        toolState[imageId] = imageIdSpecificToolState;\n      }\n    }\n\n    //console.log(toolState);\n\n    // TODO -> return seg metadata and brush tool data.\n\n    return { toolState, segMetadata };\n  }\n}\n"],"sourceRoot":""}