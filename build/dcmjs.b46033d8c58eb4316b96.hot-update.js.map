{"version":3,"sources":["webpack://dcmjs/./adapters/Cornerstone/Segmentation.js"],"names":["Segmentation","stackOfImages","toolState","segArrayBuffer","console","log"],"mappings":";;;;;;;;;;;;;;;;;;;;IAAqBA,Y;AACnB,0BAAc;AAAA;AAAE;;;;sCAESC,a,EAAeC,S,EAAW,CAAE;;;kCAEhCD,a,EAAeE,c,EAAgB;AAClDC,cAAQC,GAAR,CAAY,SAAZ;;AAEAD,cAAQC,GAAR,CAAYJ,aAAZ;AACAG,cAAQC,GAAR,CAAYF,cAAZ;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;AA6BD;;;;;;kBAxCkBH,Y","file":"dcmjs.b46033d8c58eb4316b96.hot-update.js","sourcesContent":["export default class Segmentation {\n  constructor() {}\n\n  static generateToolState(stackOfImages, toolState) {}\n\n  static readToolState(stackOfImages, segArrayBuffer) {\n    console.log(\"success\");\n\n    console.log(stackOfImages);\n    console.log(segArrayBuffer);\n\n    /*\n    const { globalImageIdSpecificToolStateManager } = cornerstoneTools;\n\n    for (let i = 0; i < imageIds.length; i++) {\n      const imageId = imageIds[i];\n      const byteOffset = width * height * i;\n      const length = width * height;\n      const slicePixelData = new Uint8ClampedArray(buffer, byteOffset, length);\n\n      const toolData = [];\n      toolData[segmentationIndex] = {\n        pixelData: slicePixelData,\n        invalidated: true\n      };\n\n      const toolState =\n        globalImageIdSpecificToolStateManager.saveImageIdToolState(imageId) ||\n        {};\n\n      toolState[toolType] = {\n        data: toolData\n      };\n\n      globalImageIdSpecificToolStateManager.restoreImageIdToolState(\n        imageId,\n        toolState\n      );\n    }\n    */\n  }\n}\n"],"sourceRoot":""}