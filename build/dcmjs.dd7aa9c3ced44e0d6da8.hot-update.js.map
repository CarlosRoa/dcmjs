{"version":3,"sources":["webpack://dcmjs/./adapters/Cornerstone/Segmentation.js"],"names":["Segmentation","stackOfImages","toolState","segMetadata","idx","segment","modules","brush","setters","metadata","_seriesInfo","seriesInstanceUid","imageIds","arrayBuffer","dicomData","dcmjs","data","DicomMessage","readFile","dataset","DicomMetaDictionary","naturalizeDataset","dict","_meta","namifyDataset","meta","multiframe","normalizers","Normalizer","normalizeToDataset","segmentSequence","SegmentSequence","console","log","Array","isArray","i","length","push"],"mappings":";;;;;;;;;;;;;;;;;;;;IAAqBA,Y;AACnB,0BAAc;AAAA;AAAE;;;;sCAESC,a,EAAeC,S,EAAW,CAAE;;;oCAE9BC,W,EAAaC,G,EAAKC,O,EAAS;AAChDF,kBAAYC,GAAZ,IAAmBC,OAAnB;;AAEAC,cAAQC,KAAR,CAAcC,OAAd,CAAsBC,QAAtB,CACE,KAAKC,WAAL,CAAiBC,iBADnB,EAEEP,GAFF,EAGEC,OAHF;AAKD;;;kCAEoBO,Q,EAAUC,W,EAAa;AAC1CC,kBAAYC,MAAMC,IAAN,CAAWC,YAAX,CAAwBC,QAAxB,CAAiCL,WAAjC,CAAZ;AACA,UAAIM,UAAUJ,MAAMC,IAAN,CAAWI,mBAAX,CAA+BC,iBAA/B,CACZP,UAAUQ,IADE,CAAd;AAGAH,cAAQI,KAAR,GAAgBR,MAAMC,IAAN,CAAWI,mBAAX,CAA+BI,aAA/B,CACdV,UAAUW,IADI,CAAhB;AAGA,UAAMC,aAAaX,MAAMY,WAAN,CAAkBC,UAAlB,CAA6BC,kBAA7B,CAAgD,CACjEV,OADiE,CAAhD,CAAnB;;AAIA,UAAMW,kBAAkBJ,WAAWK,eAAnC;;AAEAC,cAAQC,GAAR,CAAYP,UAAZ;;AAEA,UAAMvB,cAAc,EAApB;;AAEA,UAAI+B,MAAMC,OAAN,CAAcL,eAAd,CAAJ,EAAoC;AAClC,aAAK,IAAIM,IAAI,CAAb,EAAgBA,IAAIN,gBAAgBO,MAApC,EAA4CD,GAA5C,EAAiD;AAC/CjC,sBAAYmC,IAAZ,CAAiBR,gBAAgBM,CAAhB,CAAjB;AACA;;;;;AAKD;AACF,OATD,MASO;AACL;AACAjC,oBAAY,CAAZ,IAAiB2B,eAAjB;AACA;;;;;AAKD;;AAED;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;AA6BD;;;;;;kBAnFkB9B,Y","file":"dcmjs.dd7aa9c3ced44e0d6da8.hot-update.js","sourcesContent":["export default class Segmentation {\n  constructor() {}\n\n  static generateToolState(stackOfImages, toolState) {}\n\n  static _setSegMetadata(segMetadata, idx, segment) {\n    segMetadata[idx] = segment;\n\n    modules.brush.setters.metadata(\n      this._seriesInfo.seriesInstanceUid,\n      idx,\n      segment\n    );\n  }\n\n  static readToolState(imageIds, arrayBuffer) {\n    dicomData = dcmjs.data.DicomMessage.readFile(arrayBuffer);\n    let dataset = dcmjs.data.DicomMetaDictionary.naturalizeDataset(\n      dicomData.dict\n    );\n    dataset._meta = dcmjs.data.DicomMetaDictionary.namifyDataset(\n      dicomData.meta\n    );\n    const multiframe = dcmjs.normalizers.Normalizer.normalizeToDataset([\n      dataset\n    ]);\n\n    const segmentSequence = multiframe.SegmentSequence;\n\n    console.log(multiframe);\n\n    const segMetadata = [];\n\n    if (Array.isArray(segmentSequence)) {\n      for (let i = 0; i < segmentSequence.length; i++) {\n        segMetadata.push(segmentSequence[i]);\n        /*\n        for (let j = 0; j < dimensions.cube; j++) {\n          mask[j] = pixelData[i * dimensions.cube + j];\n        }\n        */\n      }\n    } else {\n      // Only one segment, will be stored as an object.\n      segMetadata[0] = segmentSequence;\n      /*\n      for (let j = 0; j < dimensions.cube; j++) {\n        mask[j] = pixelData[j];\n      }\n      */\n    }\n\n    // TODO -> return seg metadata and brush tool data.\n\n    /*\n    const { globalImageIdSpecificToolStateManager } = cornerstoneTools;\n\n    for (let i = 0; i < imageIds.length; i++) {\n      const imageId = imageIds[i];\n      const byteOffset = width * height * i;\n      const length = width * height;\n      const slicePixelData = new Uint8ClampedArray(buffer, byteOffset, length);\n\n      const toolData = [];\n      toolData[segmentationIndex] = {\n        pixelData: slicePixelData,\n        invalidated: true\n      };\n\n      const toolState =\n        globalImageIdSpecificToolStateManager.saveImageIdToolState(imageId) ||\n        {};\n\n      toolState[toolType] = {\n        data: toolData\n      };\n\n      globalImageIdSpecificToolStateManager.restoreImageIdToolState(\n        imageId,\n        toolState\n      );\n    }\n    */\n  }\n}\n"],"sourceRoot":""}