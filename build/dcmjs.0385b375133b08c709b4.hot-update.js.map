{"version":3,"sources":["webpack://dcmjs/./adapters/Cornerstone/Segmentation.js"],"names":["Segmentation","stackOfImages","toolState","imageIds","arrayBuffer","dicomData","dcmjs","data","DicomMessage","readFile","dataset","DicomMetaDictionary","naturalizeDataset","dict","_meta","namifyDataset","meta","multiframe","normalizers","Normalizer","normalizeToDataset","segmentSequence","SegmentSequence","Array","isArray","i","length","segment","_setSegMetadata"],"mappings":";;;;;;;;;;;;;;;;;;;;IAAqBA,Y;AACnB,0BAAc;AAAA;AAAE;;;;sCAESC,a,EAAeC,S,EAAW,CAAE;;;kCAEhCC,Q,EAAUC,W,EAAa;AAC1CC,kBAAYC,MAAMC,IAAN,CAAWC,YAAX,CAAwBC,QAAxB,CAAiCL,WAAjC,CAAZ;AACA,UAAIM,UAAUJ,MAAMC,IAAN,CAAWI,mBAAX,CAA+BC,iBAA/B,CACZP,UAAUQ,IADE,CAAd;AAGAH,cAAQI,KAAR,GAAgBR,MAAMC,IAAN,CAAWI,mBAAX,CAA+BI,aAA/B,CACdV,UAAUW,IADI,CAAhB;AAGAC,mBAAaX,MAAMY,WAAN,CAAkBC,UAAlB,CAA6BC,kBAA7B,CAAgD,CAACV,OAAD,CAAhD,CAAb;;AAEA,UAAMW,kBAAkBJ,WAAWK,eAAnC;;AAEA,UAAIC,MAAMC,OAAN,CAAcH,eAAd,CAAJ,EAAoC;AAClC,aAAK,IAAII,IAAI,CAAb,EAAgBA,IAAIJ,gBAAgBK,MAApC,EAA4CD,GAA5C,EAAiD;AAC/C,cAAME,UAAUN,gBAAgBI,CAAhB,CAAhB;;AAEA,eAAKG,eAAL,CAAqBH,CAArB,EAAwBE,OAAxB;AACA;;;;;AAKD;AACF,OAXD,MAWO;AACL;AACA,YAAMA,WAAUN,eAAhB;;AAEArB,qBAAa4B,eAAb,CAA6B,CAA7B,EAAgCD,QAAhC;AACA;;;;;AAKD;;AAED;;;;;;;;;;;;;;;;;;;;;;;;AA6BD;;;;;;kBArEkB3B,Y","file":"dcmjs.0385b375133b08c709b4.hot-update.js","sourcesContent":["export default class Segmentation {\n  constructor() {}\n\n  static generateToolState(stackOfImages, toolState) {}\n\n  static readToolState(imageIds, arrayBuffer) {\n    dicomData = dcmjs.data.DicomMessage.readFile(arrayBuffer);\n    let dataset = dcmjs.data.DicomMetaDictionary.naturalizeDataset(\n      dicomData.dict\n    );\n    dataset._meta = dcmjs.data.DicomMetaDictionary.namifyDataset(\n      dicomData.meta\n    );\n    multiframe = dcmjs.normalizers.Normalizer.normalizeToDataset([dataset]);\n\n    const segmentSequence = multiframe.SegmentSequence;\n\n    if (Array.isArray(segmentSequence)) {\n      for (let i = 0; i < segmentSequence.length; i++) {\n        const segment = segmentSequence[i];\n\n        this._setSegMetadata(i, segment);\n        /*\n        for (let j = 0; j < dimensions.cube; j++) {\n          mask[j] = pixelData[i * dimensions.cube + j];\n        }\n        */\n      }\n    } else {\n      // Only one segment, will be stored as an object.\n      const segment = segmentSequence;\n\n      Segmentation._setSegMetadata(0, segment);\n      /*\n      for (let j = 0; j < dimensions.cube; j++) {\n        mask[j] = pixelData[j];\n      }\n      */\n    }\n\n    /*\n    const { globalImageIdSpecificToolStateManager } = cornerstoneTools;\n\n    for (let i = 0; i < imageIds.length; i++) {\n      const imageId = imageIds[i];\n      const byteOffset = width * height * i;\n      const length = width * height;\n      const slicePixelData = new Uint8ClampedArray(buffer, byteOffset, length);\n\n      const toolData = [];\n      toolData[segmentationIndex] = {\n        pixelData: slicePixelData,\n        invalidated: true\n      };\n\n      const toolState =\n        globalImageIdSpecificToolStateManager.saveImageIdToolState(imageId) ||\n        {};\n\n      toolState[toolType] = {\n        data: toolData\n      };\n\n      globalImageIdSpecificToolStateManager.restoreImageIdToolState(\n        imageId,\n        toolState\n      );\n    }\n    */\n  }\n}\n"],"sourceRoot":""}