{"version":3,"sources":["webpack://dcmjs/./adapters/Cornerstone/Segmentation.js"],"names":["Segmentation","imageIds","toolState","imageId","arrayBuffer","dicomData","dcmjs","data","DicomMessage","readFile","dataset","DicomMetaDictionary","naturalizeDataset","dict","_meta","namifyDataset","meta","multiframe","normalizers","Normalizer","normalizeToDataset","dims","x","Columns","y","Rows","z","length","xy","xyz","segmentSequence","SegmentSequence","pixelData","BitArray","unpack","PixelData","segMetadata","seriesInstanceUid","SeriesInstanceUid","Array","isArray","segCount","imageIdSpecificToolState","brush","brushData","i","invalidated","Uint8ClampedArray","segIndex","push","cToolsPixelData","p"],"mappings":"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","file":"dcmjs.518478ebacb0afbbfae3.hot-update.js","sourcesContent":["export default class Segmentation {\n  constructor() {}\n\n  static generateToolState(imageIds, toolState) {\n    const imageId = imageIds[0];\n  }\n\n  static _addOneSegToCornerstoneToolState() {}\n\n  static readToolState(imageIds, arrayBuffer) {\n    dicomData = dcmjs.data.DicomMessage.readFile(arrayBuffer);\n    let dataset = dcmjs.data.DicomMetaDictionary.naturalizeDataset(\n      dicomData.dict\n    );\n    dataset._meta = dcmjs.data.DicomMetaDictionary.namifyDataset(\n      dicomData.meta\n    );\n    const multiframe = dcmjs.normalizers.Normalizer.normalizeToDataset([\n      dataset\n    ]);\n\n    const dims = {\n      x: multiframe.Columns,\n      y: multiframe.Rows,\n      z: imageIds.length,\n      xy: multiframe.Columns * multiframe.Rows,\n      xyz: multiframe.Columns * multiframe.Rows * imageIds.length\n    };\n\n    const segmentSequence = multiframe.SegmentSequence;\n    const pixelData = dcmjs.data.BitArray.unpack(multiframe.PixelData);\n\n    //console.log(segmentSequence);\n\n    //console.log(multiframe);\n\n    const segMetadata = {\n      seriesInstanceUid: multiframe.SeriesInstanceUid,\n      data: []\n    };\n\n    const toolState = {};\n\n    if (Array.isArray(segmentSequence)) {\n      const segCount = segmentSequence.length;\n\n      for (let z = 0; z < imageIds.length; z++) {\n        const imageId = imageIds[z];\n\n        const imageIdSpecificToolState = {};\n\n        imageIdSpecificToolState.brush = {};\n        imageIdSpecificToolState.brush.data = [];\n\n        const brushData = imageIdSpecificToolState.brush.data;\n\n        for (let i = 0; i < segCount; i++) {\n          brushData[i] = {\n            invalidated: true,\n            pixelData: new Uint8ClampedArray(dims.x * dims.y)\n          };\n        }\n\n        toolState[imageId] = imageIdSpecificToolState;\n      }\n\n      for (let segIndex = 0; segIndex < segmentSequence.length; segIndex++) {\n        segMetadata.data.push(segmentSequence[segIndex]);\n\n        for (let z = 0; z < imageIds.length; z++) {\n          const imageId = imageIds[z];\n\n          const cToolsPixelData =\n            toolState[imageId].brush.data[segIndex].pixelData;\n\n          for (let p = 0; p < dims.xy; p++) {\n            cToolsPixelData[p] =\n              pixelData[segIndex * dims.xyz + z * dims.xy + p];\n          }\n        }\n      }\n    } else {\n      // Only one segment, will be stored as an object.\n      segMetadata.data.push(segmentSequence);\n\n      const segIndex = 0;\n\n      for (let z = 0; z < imageIds.length; z++) {\n        const imageId = imageIds[z];\n\n        const imageIdSpecificToolState = {};\n\n        imageIdSpecificToolState.brush = {};\n        imageIdSpecificToolState.brush.data = [];\n        imageIdSpecificToolState.brush.data[segIndex] = {\n          invalidated: true,\n          pixelData: new Uint8ClampedArray(dims.x * dims.y)\n        };\n\n        const cToolsPixelData =\n          imageIdSpecificToolState.brush.data[segIndex].pixelData;\n\n        for (let p = 0; p < dims.xy; p++) {\n          cToolsPixelData[p] = pixelData[z * dims.xy + p];\n        }\n\n        toolState[imageId] = imageIdSpecificToolState;\n      }\n    }\n\n    //console.log(toolState);\n\n    // TODO -> return seg metadata and brush tool data.\n\n    return { toolState, segMetadata };\n  }\n}\n"],"sourceRoot":""}