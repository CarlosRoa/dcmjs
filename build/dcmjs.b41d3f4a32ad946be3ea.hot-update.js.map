{"version":3,"sources":["webpack://dcmjs/./adapters/Cornerstone/Segmentation.js"],"names":["Segmentation","imageIds","images","brushData","brushState","toolState","segments","datasets","multiframe","contains","seg","createSegFromImages","addMetaDataToSeg","dataSet","dataset","SegmentSequence","numSegments","i","length","addSegment","isMultiframe","image","arrayBuffer","data","byteArray","buffer","dicomData","dcmjs","DicomMessage","readFile","DicomMetaDictionary","naturalizeDataset","dict","_meta","namifyDataset","meta","push","normalizers","Normalizer","normalizeToDataset","derivations","dims","x","Columns","y","Rows","z","xy","xyz","segmentSequence","pixelData","BitArray","unpack","PixelData","segMetadata","seriesInstanceUid","SeriesInstanceUid","Array","isArray","segCount","imageId","imageIdSpecificToolState","brush","invalidated","Uint8ClampedArray","segIndex","cToolsPixelData","p"],"mappings":"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","file":"dcmjs.b41d3f4a32ad946be3ea.hot-update.js","sourcesContent":["export default class Segmentation {\n  constructor() {}\n\n  static generateToolState(imageIds, images, brushData) {\n    const { toolState, segments } = brushState;\n    const datasets = [];\n\n    const multiframe = imageIds[0].contains(\"?frame\");\n\n    const seg = Segmentation.createSegFromImages(images, multiframe);\n\n    Segmentation.addMetaDataToSeg(seg, segments);\n\n    const dataSet = seg.dataset;\n\n    const SegmentSequence = dataSet.SegmentSequence;\n\n    let numSegments = 0;\n\n    // TODO -> save pixel data to seg.pixelData\n  }\n\n  static addMetaDataToSeg(seg, segments) {\n    for (let i = 0; i < segments.length; i++) {\n      if (segments[i]) {\n        numSegments++;\n\n        seg.addSegment(segments[i]);\n      }\n    }\n  }\n\n  /**\n   * @static createSegFromImages - description\n   *\n   * @param  {object} images       description\n   * @param  {Boolean} isMultiframe description\n   * @returns {dataSet}              description\n   */\n  static createSegFromImages(images, isMultiframe) {\n    if (isMultiframe) {\n      const image = images[0];\n      const arrayBuffer = image.data.byteArray.buffer;\n\n      const dicomData = dcmjs.data.DicomMessage.readFile(arrayBuffer);\n      const dataset = dcmjs.data.DicomMetaDictionary.naturalizeDataset(\n        dicomData.dict\n      );\n\n      dataset._meta = dcmjs.data.DicomMetaDictionary.namifyDataset(\n        dicomData.meta\n      );\n\n      datasets.push(dataset);\n    } else {\n      for (let i = 0; i < images.length; i++) {\n        const image = images[i];\n        const arrayBuffer = image.data.byteArray.buffer;\n        const dicomData = dcmjs.data.DicomMessage.readFile(arrayBuffer);\n        const dataset = dcmjs.data.DicomMetaDictionary.naturalizeDataset(\n          dicomData.dict\n        );\n\n        dataset._meta = dcmjs.data.DicomMetaDictionary.namifyDataset(\n          dicomData.meta\n        );\n        datasets.push(dataset);\n      }\n    }\n\n    const multiframe = dcmjs.normalizers.Normalizer.normalizeToDataset(\n      datasets\n    );\n\n    return new dcmjs.derivations.Segmentation([multiframe]);\n  }\n\n  static readToolState(imageIds, arrayBuffer) {\n    dicomData = dcmjs.data.DicomMessage.readFile(arrayBuffer);\n    let dataset = dcmjs.data.DicomMetaDictionary.naturalizeDataset(\n      dicomData.dict\n    );\n    dataset._meta = dcmjs.data.DicomMetaDictionary.namifyDataset(\n      dicomData.meta\n    );\n    const multiframe = dcmjs.normalizers.Normalizer.normalizeToDataset([\n      dataset\n    ]);\n\n    const dims = {\n      x: multiframe.Columns,\n      y: multiframe.Rows,\n      z: imageIds.length,\n      xy: multiframe.Columns * multiframe.Rows,\n      xyz: multiframe.Columns * multiframe.Rows * imageIds.length\n    };\n\n    const segmentSequence = multiframe.SegmentSequence;\n    const pixelData = dcmjs.data.BitArray.unpack(multiframe.PixelData);\n\n    //console.log(segmentSequence);\n\n    //console.log(multiframe);\n\n    const segMetadata = {\n      seriesInstanceUid: multiframe.SeriesInstanceUid,\n      data: []\n    };\n\n    const toolState = {};\n\n    if (Array.isArray(segmentSequence)) {\n      const segCount = segmentSequence.length;\n\n      for (let z = 0; z < imageIds.length; z++) {\n        const imageId = imageIds[z];\n\n        const imageIdSpecificToolState = {};\n\n        imageIdSpecificToolState.brush = {};\n        imageIdSpecificToolState.brush.data = [];\n\n        const brushData = imageIdSpecificToolState.brush.data;\n\n        for (let i = 0; i < segCount; i++) {\n          brushData[i] = {\n            invalidated: true,\n            pixelData: new Uint8ClampedArray(dims.x * dims.y)\n          };\n        }\n\n        toolState[imageId] = imageIdSpecificToolState;\n      }\n\n      for (let segIndex = 0; segIndex < segmentSequence.length; segIndex++) {\n        segMetadata.data.push(segmentSequence[segIndex]);\n\n        for (let z = 0; z < imageIds.length; z++) {\n          const imageId = imageIds[z];\n\n          const cToolsPixelData =\n            toolState[imageId].brush.data[segIndex].pixelData;\n\n          for (let p = 0; p < dims.xy; p++) {\n            cToolsPixelData[p] =\n              pixelData[segIndex * dims.xyz + z * dims.xy + p];\n          }\n        }\n      }\n    } else {\n      // Only one segment, will be stored as an object.\n      segMetadata.data.push(segmentSequence);\n\n      const segIndex = 0;\n\n      for (let z = 0; z < imageIds.length; z++) {\n        const imageId = imageIds[z];\n\n        const imageIdSpecificToolState = {};\n\n        imageIdSpecificToolState.brush = {};\n        imageIdSpecificToolState.brush.data = [];\n        imageIdSpecificToolState.brush.data[segIndex] = {\n          invalidated: true,\n          pixelData: new Uint8ClampedArray(dims.x * dims.y)\n        };\n\n        const cToolsPixelData =\n          imageIdSpecificToolState.brush.data[segIndex].pixelData;\n\n        for (let p = 0; p < dims.xy; p++) {\n          cToolsPixelData[p] = pixelData[z * dims.xy + p];\n        }\n\n        toolState[imageId] = imageIdSpecificToolState;\n      }\n    }\n\n    //console.log(toolState);\n\n    // TODO -> return seg metadata and brush tool data.\n\n    return { toolState, segMetadata };\n  }\n}\n"],"sourceRoot":""}