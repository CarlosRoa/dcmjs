{"version":3,"sources":["webpack://dcmjs/./adapters/Cornerstone/Segmentation.js"],"names":["Segmentation","stackOfImages","toolState","segMetadata","idx","segment","modules","brush","setters","metadata","_seriesInfo","seriesInstanceUid","imageIds","arrayBuffer","dicomData","dcmjs","data","DicomMessage","readFile","dataset","DicomMetaDictionary","naturalizeDataset","dict","_meta","namifyDataset","meta","multiframe","normalizers","Normalizer","normalizeToDataset","dims","x","Columns","y","Rows","z","length","xy","segmentSequence","SegmentSequence","pixelData","BitArray","unpack","PixelData","console","log","Array","isArray","i","push","segIndex","imageId","imageIdSpecificToolState","invalidated","Uint8ClampedArray","p"],"mappings":";;;;;;;;;;;;;;;;;;;;IAAqBA,Y;AACnB,0BAAc;AAAA;AAAE;;;;sCAESC,a,EAAeC,S,EAAW,CAAE;;;oCAE9BC,W,EAAaC,G,EAAKC,O,EAAS;AAChDF,kBAAYC,GAAZ,IAAmBC,OAAnB;;AAEAC,cAAQC,KAAR,CAAcC,OAAd,CAAsBC,QAAtB,CACE,KAAKC,WAAL,CAAiBC,iBADnB,EAEEP,GAFF,EAGEC,OAHF;AAKD;;;uDAEyC,CAAE;;;kCAEvBO,Q,EAAUC,W,EAAa;AAC1CC,kBAAYC,MAAMC,IAAN,CAAWC,YAAX,CAAwBC,QAAxB,CAAiCL,WAAjC,CAAZ;AACA,UAAIM,UAAUJ,MAAMC,IAAN,CAAWI,mBAAX,CAA+BC,iBAA/B,CACZP,UAAUQ,IADE,CAAd;AAGAH,cAAQI,KAAR,GAAgBR,MAAMC,IAAN,CAAWI,mBAAX,CAA+BI,aAA/B,CACdV,UAAUW,IADI,CAAhB;AAGA,UAAMC,aAAaX,MAAMY,WAAN,CAAkBC,UAAlB,CAA6BC,kBAA7B,CAAgD,CACjEV,OADiE,CAAhD,CAAnB;;AAIA,UAAMW,OAAO;AACXC,WAAGL,WAAWM,OADH;AAEXC,WAAGP,WAAWQ,IAFH;AAGXC,WAAGvB,SAASwB,MAHD;AAIXC,YAAIX,WAAWM,OAAX,GAAqBN,WAAWQ;AAJzB,OAAb;;AAOA,UAAMI,kBAAkBZ,WAAWa,eAAnC;AACA,UAAMC,YAAYzB,MAAMC,IAAN,CAAWyB,QAAX,CAAoBC,MAApB,CAA2BhB,WAAWiB,SAAtC,CAAlB;;AAEAC,cAAQC,GAAR,CAAYP,eAAZ;;AAEAM,cAAQC,GAAR,CAAYnB,UAAZ;;AAEA,UAAMvB,cAAc,EAApB;;AAEA,UAAMD,YAAY,EAAlB;;AAEA,UAAI4C,MAAMC,OAAN,CAAcT,eAAd,CAAJ,EAAoC;AAClC,aAAK,IAAIU,IAAI,CAAb,EAAgBA,IAAIV,gBAAgBF,MAApC,EAA4CY,GAA5C,EAAiD;AAC/C7C,sBAAY8C,IAAZ,CAAiBX,gBAAgBU,CAAhB,CAAjB;;AAEA;;;;;AAKD;AACF,OAVD,MAUO;AACL;AACA7C,oBAAY8C,IAAZ,CAAiBX,eAAjB;;AAEA,YAAMY,WAAW,CAAjB;;AAEA,aAAK,IAAIf,IAAI,CAAb,EAAgBA,IAAIvB,SAASwB,MAA7B,EAAqCD,GAArC,EAA0C;AACxC,cAAMgB,UAAUvC,SAASuB,CAAT,CAAhB;;AAEA,cAAMiB,2BAA2B,EAAjC;AACAA,mCAAyB7C,KAAzB,GAAiC,EAAjC;AACA6C,mCAAyB7C,KAAzB,CAA+BS,IAA/B,GAAsC,EAAtC;;AAEAoC,mCAAyB7C,KAAzB,CAA+BS,IAA/B,CAAoCkC,QAApC,IAAgD;AAC9CG,yBAAa,IADiC;AAE9Cb,uBAAW,IAAIc,iBAAJ,CAAsBxB,KAAKC,CAAL,GAASD,KAAKG,CAApC;AAFmC,WAAhD;;AAKA,cAAMO,aACJY,yBAAyB7C,KAAzB,CAA+BS,IAA/B,CAAoCkC,QAApC,EAA8CV,SADhD;;AAGA,eAAK,IAAIe,IAAI,CAAb,EAAgBA,IAAIzB,KAAKO,EAAzB,EAA6BkB,GAA7B,EAAkC;AAChCf,uBAAUe,CAAV,IAAe,CAACpB,IAAIL,KAAKO,EAAT,GAAckB,CAAf,CAAf;AACD;;AAEDrD,oBAAUiD,OAAV,IAAqBC,wBAArB;AACD;;AAEDR,gBAAQC,GAAR,CAAY3C,SAAZ;;AAEA;;;;;AAKD;;AAED;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;AA6BD;;;;;;kBA7HkBF,Y","file":"dcmjs.b08ea97294dd0ff70cd4.hot-update.js","sourcesContent":["export default class Segmentation {\n  constructor() {}\n\n  static generateToolState(stackOfImages, toolState) {}\n\n  static _setSegMetadata(segMetadata, idx, segment) {\n    segMetadata[idx] = segment;\n\n    modules.brush.setters.metadata(\n      this._seriesInfo.seriesInstanceUid,\n      idx,\n      segment\n    );\n  }\n\n  static _addOneSegToCornerstoneToolState() {}\n\n  static readToolState(imageIds, arrayBuffer) {\n    dicomData = dcmjs.data.DicomMessage.readFile(arrayBuffer);\n    let dataset = dcmjs.data.DicomMetaDictionary.naturalizeDataset(\n      dicomData.dict\n    );\n    dataset._meta = dcmjs.data.DicomMetaDictionary.namifyDataset(\n      dicomData.meta\n    );\n    const multiframe = dcmjs.normalizers.Normalizer.normalizeToDataset([\n      dataset\n    ]);\n\n    const dims = {\n      x: multiframe.Columns,\n      y: multiframe.Rows,\n      z: imageIds.length,\n      xy: multiframe.Columns * multiframe.Rows\n    };\n\n    const segmentSequence = multiframe.SegmentSequence;\n    const pixelData = dcmjs.data.BitArray.unpack(multiframe.PixelData);\n\n    console.log(segmentSequence);\n\n    console.log(multiframe);\n\n    const segMetadata = [];\n\n    const toolState = {};\n\n    if (Array.isArray(segmentSequence)) {\n      for (let i = 0; i < segmentSequence.length; i++) {\n        segMetadata.push(segmentSequence[i]);\n\n        /*\n        for (let j = 0; j < dimensions.cube; j++) {\n          mask[j] = pixelData[i * dimensions.cube + j];\n        }\n        */\n      }\n    } else {\n      // Only one segment, will be stored as an object.\n      segMetadata.push(segmentSequence);\n\n      const segIndex = 0;\n\n      for (let z = 0; z < imageIds.length; z++) {\n        const imageId = imageIds[z];\n\n        const imageIdSpecificToolState = {};\n        imageIdSpecificToolState.brush = {};\n        imageIdSpecificToolState.brush.data = [];\n\n        imageIdSpecificToolState.brush.data[segIndex] = {\n          invalidated: true,\n          pixelData: new Uint8ClampedArray(dims.x * dims.y)\n        };\n\n        const pixelData =\n          imageIdSpecificToolState.brush.data[segIndex].pixelData;\n\n        for (let p = 0; p < dims.xy; p++) {\n          pixelData[p] = [z * dims.xy + p];\n        }\n\n        toolState[imageId] = imageIdSpecificToolState;\n      }\n\n      console.log(toolState);\n\n      /*\n      for (let j = 0; j < dimensions.cube; j++) {\n        mask[j] = pixelData[j];\n      }\n      */\n    }\n\n    // TODO -> return seg metadata and brush tool data.\n\n    /*\n    const { globalImageIdSpecificToolStateManager } = cornerstoneTools;\n\n    for (let i = 0; i < imageIds.length; i++) {\n      const imageId = imageIds[i];\n      const byteOffset = width * height * i;\n      const length = width * height;\n      const slicePixelData = new Uint8ClampedArray(buffer, byteOffset, length);\n\n      const toolData = [];\n      toolData[segmentationIndex] = {\n        pixelData: slicePixelData,\n        invalidated: true\n      };\n\n      const toolState =\n        globalImageIdSpecificToolStateManager.saveImageIdToolState(imageId) ||\n        {};\n\n      toolState[toolType] = {\n        data: toolData\n      };\n\n      globalImageIdSpecificToolStateManager.restoreImageIdToolState(\n        imageId,\n        toolState\n      );\n    }\n    */\n  }\n}\n"],"sourceRoot":""}