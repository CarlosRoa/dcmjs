{"version":3,"sources":["webpack://dcmjs/./adapters/Cornerstone/Segmentation.js"],"names":["Segmentation","imageIds","images","toolState","multiframe","contains","datasets","image","arrayBuffer","data","byteArray","buffer","dicomData","dcmjs","DicomMessage","readFile","dataset","DicomMetaDictionary","naturalizeDataset","dict","_meta","namifyDataset","meta","push","normalizers","Normalizer","normalizeToDataset","dims","x","Columns","y","Rows","z","length","xy","xyz","segmentSequence","SegmentSequence","pixelData","BitArray","unpack","PixelData","segMetadata","seriesInstanceUid","SeriesInstanceUid","Array","isArray","segCount","imageId","imageIdSpecificToolState","brush","brushData","i","invalidated","Uint8ClampedArray","segIndex","cToolsPixelData","p"],"mappings":"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","file":"dcmjs.695ff7ce6811e46228d8.hot-update.js","sourcesContent":["export default class Segmentation {\n  constructor() {}\n\n  static generateToolState(imageIds, images, toolState) {\n    const multiframe = imageIds[0].contains(\"?frame\");\n    const datasets = [];\n\n    if (multiframe) {\n      const image = images[0];\n      const arrayBuffer = image.data.byteArray.buffer;\n\n      const dicomData = dcmjs.data.DicomMessage.readFile(arrayBuffer);\n      const dataset = dcmjs.data.DicomMetaDictionary.naturalizeDataset(\n        dicomData.dict\n      );\n\n      dataset._meta = dcmjs.data.DicomMetaDictionary.namifyDataset(\n        dicomData.meta\n      );\n\n      datasets.push(dataset);\n    }\n  }\n\n  static _addOneSegToCornerstoneToolState() {}\n\n  static readToolState(imageIds, arrayBuffer) {\n    dicomData = dcmjs.data.DicomMessage.readFile(arrayBuffer);\n    let dataset = dcmjs.data.DicomMetaDictionary.naturalizeDataset(\n      dicomData.dict\n    );\n    dataset._meta = dcmjs.data.DicomMetaDictionary.namifyDataset(\n      dicomData.meta\n    );\n    const multiframe = dcmjs.normalizers.Normalizer.normalizeToDataset([\n      dataset\n    ]);\n\n    const dims = {\n      x: multiframe.Columns,\n      y: multiframe.Rows,\n      z: imageIds.length,\n      xy: multiframe.Columns * multiframe.Rows,\n      xyz: multiframe.Columns * multiframe.Rows * imageIds.length\n    };\n\n    const segmentSequence = multiframe.SegmentSequence;\n    const pixelData = dcmjs.data.BitArray.unpack(multiframe.PixelData);\n\n    //console.log(segmentSequence);\n\n    //console.log(multiframe);\n\n    const segMetadata = {\n      seriesInstanceUid: multiframe.SeriesInstanceUid,\n      data: []\n    };\n\n    const toolState = {};\n\n    if (Array.isArray(segmentSequence)) {\n      const segCount = segmentSequence.length;\n\n      for (let z = 0; z < imageIds.length; z++) {\n        const imageId = imageIds[z];\n\n        const imageIdSpecificToolState = {};\n\n        imageIdSpecificToolState.brush = {};\n        imageIdSpecificToolState.brush.data = [];\n\n        const brushData = imageIdSpecificToolState.brush.data;\n\n        for (let i = 0; i < segCount; i++) {\n          brushData[i] = {\n            invalidated: true,\n            pixelData: new Uint8ClampedArray(dims.x * dims.y)\n          };\n        }\n\n        toolState[imageId] = imageIdSpecificToolState;\n      }\n\n      for (let segIndex = 0; segIndex < segmentSequence.length; segIndex++) {\n        segMetadata.data.push(segmentSequence[segIndex]);\n\n        for (let z = 0; z < imageIds.length; z++) {\n          const imageId = imageIds[z];\n\n          const cToolsPixelData =\n            toolState[imageId].brush.data[segIndex].pixelData;\n\n          for (let p = 0; p < dims.xy; p++) {\n            cToolsPixelData[p] =\n              pixelData[segIndex * dims.xyz + z * dims.xy + p];\n          }\n        }\n      }\n    } else {\n      // Only one segment, will be stored as an object.\n      segMetadata.data.push(segmentSequence);\n\n      const segIndex = 0;\n\n      for (let z = 0; z < imageIds.length; z++) {\n        const imageId = imageIds[z];\n\n        const imageIdSpecificToolState = {};\n\n        imageIdSpecificToolState.brush = {};\n        imageIdSpecificToolState.brush.data = [];\n        imageIdSpecificToolState.brush.data[segIndex] = {\n          invalidated: true,\n          pixelData: new Uint8ClampedArray(dims.x * dims.y)\n        };\n\n        const cToolsPixelData =\n          imageIdSpecificToolState.brush.data[segIndex].pixelData;\n\n        for (let p = 0; p < dims.xy; p++) {\n          cToolsPixelData[p] = pixelData[z * dims.xy + p];\n        }\n\n        toolState[imageId] = imageIdSpecificToolState;\n      }\n    }\n\n    //console.log(toolState);\n\n    // TODO -> return seg metadata and brush tool data.\n\n    return { toolState, segMetadata };\n  }\n}\n"],"sourceRoot":""}